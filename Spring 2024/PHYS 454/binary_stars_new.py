# -*- coding: utf-8 -*-
"""Binary Stars

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BnaSJYtYdDV2FMRYdAQCJZP-7yE5m0oh

# **Binary Star Systems - A two body problem**
"""

import matplotlib.pyplot as plt
import numpy as np

import matplotlib.animation as animation
from matplotlib import rc
rc('animation', html='jshtml')

fig, ax = plt.subplots()

x = np.arange(0, 2*np.pi, 0.01)
line, = ax.plot(x, np.sin(x))


def animate(i):
    line.set_ydata(np.sin(x + i / 50))  # update the data.
    return line,


ani = animation.FuncAnimation(fig, animate, interval=20, blit=False, save_count=60, repeat=True)

# To save the animation, use e.g.
#
# ani.save("movie.mp4")
#
# or
#
# writer = animation.FFMpegWriter(
#     fps=15, metadata=dict(artist='Me'), bitrate=1800)
# ani.save("movie.mp4", writer=writer)

ani

"""---

https://orbital-mechanics.space/the-n-body-problem/two-body-inertial-numerical-solution.html
"""

import matplotlib.pyplot as plt
from scipy.integrate import solve_ivp
import numpy as np
import matplotlib.animation as animation
from matplotlib import rc
rc('animation', html='jshtml')

G = 6.67430e-20  # km**3/(kg * s**2)
m_1 = 1.0e26  # kg
m_2 = 0.5e26  # kg

# Initial State Vector
R_1_0 = np.array((500, 0, 0))  # km
R_2_0 = np.array((3000, 0, 0))  # km
dotR_1_0 = np.array((0, 20, 0))  # km/s
dotR_2_0 = np.array((0, 40, 0))  # km/s

y_0 = np.hstack((R_1_0, R_2_0, dotR_1_0, dotR_2_0))

def absolute_motion(t, y):
    """Calculate the motion of a two-body system in an inertial reference frame.

    The state vector ``y`` should be in the order:

    1. Coordinates of $m_1$
    2. Coordinates of $m_2$
    3. Velocity components of $m_1$
    4. Velocity components of $m_2$
    """
    # Get the six coordinates for m_1 and m_2 from the state vector
    R_1 = y[:3]
    R_2 = y[3:6]

    # Fill the derivative vector with zeros
    ydot = np.zeros_like(y)

    # Set the first 6 elements of the derivative equal to the last
    # 6 elements of the state vector, which are the velocities
    ydot[:6] = y[6:]

    # Calculate the acceleration terms and fill them in to the rest
    # of the derivative array
    r = np.sqrt(np.sum(np.square(R_2 - R_1)))
    ddot = G * (R_2 - R_1) / r**3
    ddotR_1 = m_2 * ddot
    ddotR_2 = -m_1 * ddot

    ydot[6:9] = ddotR_1
    ydot[9:] = ddotR_2
    return ydot

t_0 = 0  # seconds
t_f = 480  # seconds
t_points = np.linspace(t_0, t_f, 1000)

sol = solve_ivp(absolute_motion, [t_0, t_f], y_0, t_eval=t_points)

y = sol.y.T
R_1 = y[:, :3]  # km
R_2 = y[:, 3:6]  # km
V_1 = y[:, 6:9]  # km/s
V_2 = y[:, 9:]  # km/s
barycenter = (m_1 * R_1 + m_2 * R_2) / (m_1 + m_2)  # km

fig = plt.figure()
ax = fig.add_subplot(111, projection="3d")
R1_rel_COG = R_1 - barycenter
R2_rel_COG = R_2 - barycenter
ax.plot(R1_rel_COG[:, 0], R1_rel_COG[:, 1], R1_rel_COG[:, 2], label="m_1")
ax.plot(R2_rel_COG[:, 0], R2_rel_COG[:, 1], R2_rel_COG[:, 2], label="m_2")
ax.plot(0, 0, 0, "ro", label="COG")
ax.legend()

import matplotlib
matplotlib.rcParams['animation.embed_limit'] = 42
fig = plt.figure()
ax = fig.add_subplot(111, projection="3d")



def animate(i):
    ax.clear()
    m1 = ax.plot(R1_rel_COG[i, 0], R1_rel_COG[i, 1], R1_rel_COG[i, 2], label="m_1", marker='o')
    m2 = ax.plot(R2_rel_COG[i, 0], R2_rel_COG[i, 1], R2_rel_COG[i, 2], label="m_2", marker='o')  # update the data.
    line = ax.plot(R2_rel_COG[i, 0], R2_rel_COG[i, 1], R2_rel_COG[i, 2], label="m_2")
    ax.plot(0, 0, 0, "ro", label="COG")
    ax.set_xlabel('x')
    ax.set_xlim3d(-4e3, 4e3)
    ax.set_ylabel('y')
    ax.set_ylim3d(-4e3, 4e3)
    ax.set_zlabel('z')
    ax.set_zlim3d(-1, 1)
    return m1, m2, line

ani = animation.FuncAnimation(fig, animate, 250, interval=100, blit=False, save_count=30, repeat=True)

ani